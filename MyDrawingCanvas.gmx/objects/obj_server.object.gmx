<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//open the config of networking
ini_open("network");

//create the server socket
server = network_create_server(
    network_socket_tcp,                         //connection type: tcp(w/ verify) or udp(just send)    
    floor(ini_read_real("server", "port", 80)), //port number to use
    conn_max                                    //max number of clients connected at the same time, constants(own), value = 5
);

if(server &lt; 0) {
    show_message("Unable to create server.");
    room_goto(rm_menu);
}

last_connected = -1;            //set the index of last connected client

/*
server_buffer = buffer_create(
                512,                    //most routers support 512 bytes packet data size
                buffer_fixed,           //the size of the buffer is fixed to 512
                1                       //alignment is 1 so that there is no spaces when writing in bufer
);
*/

for(var i=0; i&lt;conn_max; i++) {
    client_socket[i] = noone;                  //initialize client sockets to no one, this where the connection will be save for sending packets
    client_ip[i] = "";
}

ini_close();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

switch(async_load[? "type"]) {  //the type of operation

    case network_type_connect:
        //adds the connected one to the list
        var index = 0;
        var ip_add = noone;
        
        for(index = 0; index&lt;conn_max; index++) {
            if(client_socket[index] == noone) {
                client_socket[index] = async_load[? "socket"];
                client_ip[index] = async_load[? "ip"];
                break;
            }
        }
        last_connected = index;
        break;
    case network_type_disconnect:
        //removes the disconnected one to the list
        var socket = async_load[? "socket"];
        var index = 0;
        for(index = 0; index&lt;conn_max; index++) {
            if(client_socket[index] == socket) {
                client_socket[index] = noone;
                client_ip[index] = "";
                break;
            }
        }
        
        var buffer = buffer_create(16, buffer_grow, 1);
        scr_buffer_set_header(buffer, "client-disconnect");
        buffer_write(buffer, buffer_u8, index);
        scr_broadcast(buffer);
        buffer_delete(buffer);
        break;
    case network_type_data:
        //process the received buffer
        scr_decode(async_load[? "buffer"]);
        break;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(server &gt;= 0) network_destroy(server);

//buffer_delete(server_buffer);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_surface_set("control");
draw_set_color(c_white);
draw_set_font(fnt_client_ip);
draw_text(300, 0, "Server");
for(var i=0; i&lt;conn_max; i++) {
    draw_set_color(scr_player_color(i));
    
    if(client_ip[i] != "") {
        draw_text(300, 75*(i+1), client_ip[i]);
    } else {
        draw_text(300, 75*(i+1), "nobody");
    }
}

scr_surface_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
