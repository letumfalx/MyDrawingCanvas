<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//one-time get information variable
get_init_info = false;
get_sim_info = true;

ini_open("network");

//create a tcp socket for connection to server
client_socket = network_create_socket(network_socket_tcp);

//create a connection to the server
server_conn = network_connect(
            client_socket,                                  //socket use for connection to server
            global.ip_address,                              //ip address/hostname of server
            floor(ini_read_real("client", "port", 80)));    //port of the server
ini_close();

if(server_conn &lt; 0) {
    show_message("Cannot connect to server!");
    room_goto(rm_menu);
}

for(var i=0; i&lt;conn_max; i++) {
    client_ip[i] = "";               //set the client ips for clients
}

//create a buffer for sending data
var client_buffer = buffer_create(32, buffer_grow, 1);
scr_buffer_set_header(client_buffer, "client-connected");
scr_buffer_send(client_socket, client_buffer);
buffer_delete(client_buffer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

switch(async_load[? "type"]) {
    case network_type_connect:
        break;
    case network_type_disconnect:
        //show_message("You have been disconnected to the server.");
        break;
    case network_type_data:
        scr_decode(async_load[? "buffer"]);
        break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(server_conn &gt;= 0) network_destroy(server_conn);
if(client_socket &gt;= 0) network_destroy(client_socket);
//buffer_delete(client_buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_surface_set("control");

    draw_set_font(fnt_client_ip);
    draw_set_color(c_white);
    draw_text(0,0, "Client");
for(var i=0; i&lt;conn_max; i++) {
    draw_set_color(scr_player_color(i));

    if(client_ip[i] != "") {
        draw_text(0, 75*(i+1), client_ip[i]);
    } else {
        draw_text(0, 75*(i+1), "nobody");
    }
}

scr_surface_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
